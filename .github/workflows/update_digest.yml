name: Update MLBTR Daily Digest

on:
  workflow_dispatch: # Allows manual runs from the Actions tab
  schedule:
    - cron: '0 22 * * *' # Runs daily at 10 PM UTC (6 PM ET / 3 PM PT)

# Prevent concurrent runs that could cause race conditions
concurrency:
  group: mlbtr-digest-${{ github.ref }}-${{ github.event.inputs.date || 'today' }}
  cancel-in-progress: true

jobs:
  update-digest:
    runs-on: ubuntu-latest
    outputs:
      digest_sha: ${{ steps.set_sha.outputs.sha }}
      content_date: ${{ steps.set_date.outputs.date }}
    permissions:
      contents: write # Needed to commit changes back to the repo
      actions: read
      pages: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        
      - name: Set content date and SHA
        id: set_date
        run: |
          # Use UTC consistently to avoid timezone issues
          CONTENT_DATE=$(date -u +%Y-%m-%d)
          echo "date=$CONTENT_DATE" >> "$GITHUB_OUTPUT"
          echo "sha=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "Processing content for UTC date: $CONTENT_DATE"

      - name: Set up Python
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # v5.2.0
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run summarizer script with logging
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          echo "Starting MLBTR daily summary at $(date)"
          python mlbtr_daily_summary.py --force 2>&1 | tee summary_run.log
          echo "Summary script completed at $(date)"
          echo "Exit code: ${PIPESTATUS[0]}"

      - name: Atomic sync files from out/ to root for GitHub Pages
        id: sync
        run: |
          set -euo pipefail
          
          echo "Starting atomic file sync..."
          
          # Create temporary staging directory
          rm -rf .site_staging && mkdir -p .site_staging
          
          # Stage all web content atomically
          if [ -f "out/index.html" ]; then
            cp out/index.html .site_staging/
            echo "Staged index.html"
          else
            echo "WARNING: No index.html found in out/"
            exit 1
          fi
          
          # Stage chat content
          if [ -d "out/chat" ]; then
            mkdir -p .site_staging/chat
            cp -r out/chat/* .site_staging/chat/ 2>/dev/null || true
            echo "Staged chat files: $(find .site_staging/chat -name "*.html" | wc -l) files"
          fi
          
          # Stage mailbag content  
          if [ -d "out/mailbag" ]; then
            mkdir -p .site_staging/mailbag
            cp -r out/mailbag/* .site_staging/mailbag/ 2>/dev/null || true
            echo "Staged mailbag files: $(find .site_staging/mailbag -name "*.html" | wc -l) files"
          fi
          
          # Verify critical files exist in staging
          TODAY=$(date -u +%Y-%m-%d)
          STAGING_VALID=true
          
          if [ ! -f ".site_staging/index.html" ]; then
            echo "ERROR: Staged index.html missing"
            STAGING_VALID=false
          fi
          
          # Only proceed with atomic swap if staging is valid
          if [ "$STAGING_VALID" = "true" ]; then
            # Atomic move from staging to production locations
            cp -f .site_staging/index.html index.html
            
            # Ensure target directories exist
            mkdir -p chat mailbag
            
            # Use rsync for atomic directory updates (--delete removes old files)
            if [ -d ".site_staging/chat" ]; then
              rsync -a --delete .site_staging/chat/ chat/
            fi
            
            if [ -d ".site_staging/mailbag" ]; then
              rsync -a --delete .site_staging/mailbag/ mailbag/
            fi
            
            echo "‚úÖ Atomic sync completed successfully"
            echo "sync_success=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Atomic sync failed - staging validation failed"
            echo "sync_success=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          
          # Cleanup staging directory
          rm -rf .site_staging

      - name: Validate generated content
        id: validate
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          
          # Initialize variables with safe defaults
          NEW_FILES_COUNT="${NEW_FILES_COUNT:-0}"
          VALIDATION_PASSED="${VALIDATION_PASSED:-false}"
          FAILURE_REASON=""
          
          echo "Starting multi-signal content validation..."
          
          # Check for any new HTML files generated today
          TODAY=$(date -u +%Y-%m-%d)
          NEW_FILES_COUNT=0
          
          # Function for multi-signal validation
          validate_file() {
            local file="$1"
            local type="$2"
            local min_size="${3:-8000}"
            
            if [ ! -f "$file" ]; then
              return 1
            fi
            
            local file_size=$(wc -c < "$file" 2>/dev/null || echo "0")
            echo "  File size: $file_size bytes (minimum: $min_size)"
            
            # Multi-signal validation checks
            local validation_errors=0
            
            # 1. Size check
            if [ "$file_size" -lt "$min_size" ]; then
              echo "  ‚ùå Size validation failed: Too small"
              ((validation_errors++))
            fi
            
            # 2. Error message detection (negative signals)
            if grep -q "I don't see any transcript\|Please share the MLB\|Error\|Exception\|Failed to" "$file" 2>/dev/null; then
              echo "  ‚ùå Content validation failed: Error messages detected"
              ((validation_errors++))
            fi
            
            # 3. Required content structure (positive signals)
            if [ "$type" = "chat" ]; then
              # Chat should have insights and transcript sections
              if ! grep -q "insights-list" "$file" 2>/dev/null; then
                echo "  ‚ùå Structure validation failed: Missing insights section"
                ((validation_errors++))
              fi
              if ! grep -q "transcript-content" "$file" 2>/dev/null; then
                echo "  ‚ùå Structure validation failed: Missing transcript section"
                ((validation_errors++))
              fi
            fi
            
            # 4. Check for minimum content indicators
            local content_count=$(grep -o "<li class=\"insight\">" "$file" 2>/dev/null | wc -l | tr -d ' ')
            if [ "$content_count" -lt 2 ]; then
              echo "  ‚ùå Content validation failed: Insufficient insights (found: $content_count)"
              ((validation_errors++))
            fi
            
            return $validation_errors
          }
          
          # Check chat files
          echo "Validating chat content..."
          if [ -f "out/chat/${TODAY}/summary.html" ]; then
            CHAT_FILE="out/chat/${TODAY}/summary.html"
            if validate_file "$CHAT_FILE" "chat" 8000; then
              echo "‚úÖ Chat content validation passed all checks"
              NEW_FILES_COUNT=$((NEW_FILES_COUNT + 1))
            else
              echo "‚ùå Chat content validation failed"
              VALIDATION_PASSED=false
              FAILURE_REASON="${FAILURE_REASON}chat:failed "
            fi
          fi
          
          # Check mailbag files
          echo "Validating mailbag content..."
          if [ -f "out/mailbag/${TODAY}/summary.html" ]; then
            MAILBAG_FILE="out/mailbag/${TODAY}/summary.html"
            if validate_file "$MAILBAG_FILE" "mailbag" 8000; then
              echo "‚úÖ Mailbag content validation passed all checks"
              NEW_FILES_COUNT=$((NEW_FILES_COUNT + 1))
            else
              echo "‚ùå Mailbag content validation failed"
              VALIDATION_PASSED=false
              FAILURE_REASON="${FAILURE_REASON}mailbag:failed "
            fi
          fi
          
          # Set VALIDATION_PASSED to true only if we have valid files
          if [ "$NEW_FILES_COUNT" -gt 0 ] && [ "$VALIDATION_PASSED" != "false" ]; then
            VALIDATION_PASSED=true
          fi
          
          # CRITICAL: Always write outputs with safe defaults - never empty strings
          echo "validation_passed=${VALIDATION_PASSED:-false}" >> "$GITHUB_OUTPUT"
          echo "new_files_count=${NEW_FILES_COUNT:-0}" >> "$GITHUB_OUTPUT"
          echo "failure_reason=${FAILURE_REASON:-none}" >> "$GITHUB_OUTPUT"
          echo "content_date=${TODAY}" >> "$GITHUB_OUTPUT"
          
          # Create validation report artifact
          mkdir -p validation_report
          cat > validation_report/results.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "validation_passed": $VALIDATION_PASSED,
            "new_files_count": $NEW_FILES_COUNT,
            "failure_reason": "${FAILURE_REASON:-none}",
            "date_checked": "$TODAY"
          }
          EOF
          
          echo "VALIDATION SUMMARY: passed=$VALIDATION_PASSED, files=$NEW_FILES_COUNT, failures=${FAILURE_REASON:-none}"
          
          # Exit with appropriate code
          if [ "$VALIDATION_PASSED" = "true" ] && [ "$NEW_FILES_COUNT" -gt 0 ]; then
            echo "üéâ Content validation passed with $NEW_FILES_COUNT new files"
            exit 0
          elif [ "$NEW_FILES_COUNT" -eq 0 ]; then
            echo "‚ÑπÔ∏è No new content generated today"
            exit 0
          else
            echo "üö´ Content validation failed: ${FAILURE_REASON}"
            exit 1
          fi

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: validation-report-${{ github.run_id }}
          path: validation_report/
          retention-days: 30
          
      - name: Upload run log as artifact
        if: always()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: summary-run-log-${{ github.run_id }}
          path: summary_run.log
          retention-days: 30

      - name: Commit and push changes
        if: steps.sync.outputs.sync_success == 'true' && steps.validate.outputs.validation_passed == 'true' && fromJson(steps.validate.outputs.new_files_count || '0') > 0
        uses: stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842 # v5.0.1
        with:
          commit_message: "üì∞ Automated Daily Digest Update"
          # Commit both out/ directory and synced root files
          file_pattern: out/ index.html chat/ mailbag/
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>" 

      - name: Generate workflow summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## MLB Trade Rumors Digest Update Summary
          
          **Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          **Content Date (UTC)**: ${{ steps.validate.outputs.content_date }}
          **Run ID**: ${{ github.run_id }}
          **Commit SHA**: ${{ github.sha }}
          
          ### Validation Results
          - **Validation Passed**: ${{ steps.validate.outputs.validation_passed || 'false' }}
          - **New Files Count**: ${{ steps.validate.outputs.new_files_count || '0' }}
          - **Failure Reason**: ${{ steps.validate.outputs.failure_reason || 'none' }}
          - **Sync Success**: ${{ steps.sync.outputs.sync_success || 'false' }}
          
          ### Actions Taken
          - Commit Created: ${{ steps.validate.outputs.validation_passed == 'true' && 'Yes' || 'No' }}
          - Pages Deployment Expected: ${{ steps.validate.outputs.validation_passed == 'true' && 'Yes' || 'No' }}
          
          ### Concurrency Info
          - Group: mlbtr-digest-${{ github.ref }}-${{ github.event.inputs.date || 'today' }}
          - Cancel in Progress: true
          
          EOF
      
      - name: Fail workflow if validation failed
        if: steps.validate.outputs.validation_passed != 'true' && steps.validate.outcome == 'failure'
        run: |
          echo "Content validation failed - marking workflow as failed to prevent Pages deployment"
          exit 1