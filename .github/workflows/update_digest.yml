name: Update MLBTR Daily Digest

on:
  workflow_dispatch: # Allows manual runs from the Actions tab
  schedule:
    - cron: '0 22 * * *' # Runs daily at 10 PM UTC (6 PM ET / 3 PM PT)

jobs:
  update-digest:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to commit changes back to the repo

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run summarizer script with logging
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          echo "Starting MLBTR daily summary at $(date)"
          python mlbtr_daily_summary.py --force 2>&1 | tee summary_run.log
          echo "Summary script completed at $(date)"
          echo "Exit code: ${PIPESTATUS[0]}"

      - name: Sync files from out/ to root for GitHub Pages
        run: |
          # Copy index.html from out/ to root
          if [ -f "out/index.html" ]; then
            cp out/index.html index.html
            echo "Copied out/index.html to root"
          fi
          
          # Copy chat directories from out/ to root
          if [ -d "out/chat" ]; then
            mkdir -p chat
            cp -r out/chat/* chat/ 2>/dev/null || true
            echo "Synced chat files to root"
          fi
          
          # Copy mailbag directories from out/ to root
          if [ -d "out/mailbag" ]; then
            mkdir -p mailbag
            cp -r out/mailbag/* mailbag/ 2>/dev/null || true
            echo "Synced mailbag files to root"
          fi

      - name: Validate generated content
        id: validate
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          
          # Initialize variables with defaults to avoid unbound var errors
          NEW_FILES_COUNT="${NEW_FILES_COUNT:-0}"
          VALIDATION_PASSED="${VALIDATION_PASSED:-true}"
          
          echo "Validating generated content..."
          
          # Check for any new HTML files generated today
          TODAY=$(date -u +%Y-%m-%d)
          NEW_FILES_COUNT=0
          
          # Check chat files
          if [ -f "out/chat/${TODAY}/summary.html" ]; then
            CHAT_FILE="out/chat/${TODAY}/summary.html"
            CHAT_SIZE=$(wc -c < "$CHAT_FILE" 2>/dev/null || echo "0")
            echo "Chat file size: $CHAT_SIZE bytes"
            
            # Check for failure indicators
            if grep -q "I don't see any transcript" "$CHAT_FILE" 2>/dev/null; then
              echo "‚ùå Chat content validation failed: Error message detected"
              VALIDATION_PASSED=false
            elif [ "$CHAT_SIZE" -lt 8000 ]; then
              echo "‚ùå Chat content validation failed: File too small ($CHAT_SIZE bytes)"
              VALIDATION_PASSED=false
            else
              echo "‚úÖ Chat content validation passed"
              NEW_FILES_COUNT=$((NEW_FILES_COUNT + 1))
            fi
          fi
          
          # Check mailbag files
          if [ -f "out/mailbag/${TODAY}/summary.html" ]; then
            MAILBAG_FILE="out/mailbag/${TODAY}/summary.html"
            MAILBAG_SIZE=$(wc -c < "$MAILBAG_FILE" 2>/dev/null || echo "0")
            echo "Mailbag file size: $MAILBAG_SIZE bytes"
            
            # Check for failure indicators
            if grep -q "I don't see any transcript\|Please share the MLB" "$MAILBAG_FILE" 2>/dev/null; then
              echo "‚ùå Mailbag content validation failed: Error message detected"
              VALIDATION_PASSED=false
            elif [ "$MAILBAG_SIZE" -lt 8000 ]; then
              echo "‚ùå Mailbag content validation failed: File too small ($MAILBAG_SIZE bytes)"
              VALIDATION_PASSED=false
            else
              echo "‚úÖ Mailbag content validation passed"
              NEW_FILES_COUNT=$((NEW_FILES_COUNT + 1))
            fi
          fi
          
          # CRITICAL: Write outputs BEFORE any exit statements
          echo "validation_passed=$VALIDATION_PASSED" >> "$GITHUB_OUTPUT"
          echo "new_files_count=$NEW_FILES_COUNT" >> "$GITHUB_OUTPUT"
          
          echo "DEBUG: VALIDATION_PASSED=$VALIDATION_PASSED, NEW_FILES_COUNT=$NEW_FILES_COUNT"
          
          # Now evaluate and exit accordingly
          if [ "$VALIDATION_PASSED" = "true" ] && [ "$NEW_FILES_COUNT" -gt 0 ]; then
            echo "üéâ Content validation passed with $NEW_FILES_COUNT new files"
            exit 0
          elif [ "$NEW_FILES_COUNT" -eq 0 ]; then
            echo "‚ÑπÔ∏è No new content generated today"
            exit 0
          else
            echo "üö´ Content validation failed - will not commit/deploy"
            exit 1
          fi

      - name: Upload run log as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-run-log
          path: summary_run.log
          retention-days: 30

      - name: Commit and push changes
        if: steps.validate.outputs.validation_passed == 'true' && fromJson(steps.validate.outputs.new_files_count) > 0
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "üì∞ Automated Daily Digest Update"
          # Commit both out/ directory and synced root files
          file_pattern: out/ index.html chat/ mailbag/
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>" 

      - name: Fail workflow if validation failed
        if: steps.validate.outputs.validation_passed != 'true' && steps.validate.outcome == 'failure'
        run: |
          echo "Content validation failed - marking workflow as failed to prevent Pages deployment"
          exit 1